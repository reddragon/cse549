Here we present an O(n^2) solution to the problem. 

Given a string 's' of length 'N', for each position 'i', we need to know the lengths of different palindromes that start at that position. We do a bit of preprocessing to get this information. The time complexity of this preprocessing is O(n^2). We do this by using the algorithm for finding the longest palindrome in a string. Given a position 'i', we can compare characters equidistant to its left and right and keep increasing the distance till these equidistant characters match. For each position, we maintain a set which stores all the unique lengths of palindrome starting at that position. We can find odd as well as even length palindromes this way. For each position 'i', there can be a maximum of 'N' entries. 

Now, for each position 'i', we have a set which contains the unique lengths of all palindromes starting at that position. Now we can use a recursive function with memoization to find the partition of the string into the minimum number of palindromes. 


Code : 

vector<set<int> > v; // v[i] is a set of integers that stores the lengths of all palindromes starting at position i. The value '1' is always in this set.
int dp[MAXN]; // MAXN is the maximum length of the string. dp[i] stores the minimum number of partitions required for the string S[i..N-1];

// We initialize all values in dp[] to -1 before calling solve(0).
#define INFINITY (int)1e9
int solve(int position)
{
	if(position == N)
		return 0; // We don't need any more partitions if we reach the end of the string
	
	int &ret = dp[position];
	if(ret != -1)
		return ret; // If we have seen this value before, don't recalculate.
	
	ret = INFINITY;

	set<int> s = v[position];
	for(set<int> :: iterator it = s.begin(); it != s.end(); it++)
	{
		ret = min(ret, solve(position + *it) + 1);
	}
	return ret;
}
	
The complexity of calculating all the values is O(N^2). This is because there are at most 'N' states that we will visit and for each of the states, there are 'N' other possible states. 

So, the complexity of both, preprocessing and calculating, is O(N^2). So, the solution has a complexity of O(N^2) too. 

