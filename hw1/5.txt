Bio-palindromes are different from the traditional string palindromes such as ABCDCBA in the sense that in a bio-palindrome, the reverse of the string is a complement of the actual string instead of an exact copy. So, a string like ACGT is a bio-palindrome. We can use the existing algorithm to find the longest palindrome to also find the longest bio-palindrome in a string. In the original algorithm, we start off from a pivot element (in case of odd length palindromes) or with no character (in case of even length palindromes) and keep expanding to the left as well as to the right, checking if the characters at each step exactly match each other. The only difference that we need to find bio-palindromes it that we should check if the characters are complements of each other. We can create a hashmap mapping each character to its complement. For example, map['A'] = 'T'. We do the same for G, C and T. Then we use the original algorithm and instead of checking if the character on the left matches the one on the right, we check if the one on the left matches the hashmap value of the one on the right. 
